// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: fabric_bitstream_schema.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b461d14426f49cac);

}  // namespace schemas
}  // namespace capnp

namespace QLMem_db {

struct FabricBitstreamQLMem {
  FabricBitstreamQLMem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b461d14426f49cac, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class FabricBitstreamQLMem::Reader {
public:
  typedef FabricBitstreamQLMem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConfigBitIds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getConfigBitIds() const;

  inline bool hasBitAddress1bits() const;
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getBitAddress1bits() const;

  inline bool hasBitAddressXbits() const;
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getBitAddressXbits() const;

  inline bool hasBitWlAddress1bits() const;
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getBitWlAddress1bits() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FabricBitstreamQLMem::Builder {
public:
  typedef FabricBitstreamQLMem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasConfigBitIds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getConfigBitIds();
  inline void setConfigBitIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConfigBitIds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initConfigBitIds(unsigned int size);
  inline void adoptConfigBitIds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownConfigBitIds();

  inline bool hasBitAddress1bits();
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getBitAddress1bits();
  inline void setBitAddress1bits( ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setBitAddress1bits(::kj::ArrayPtr<const  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initBitAddress1bits(unsigned int size);
  inline void adoptBitAddress1bits(::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownBitAddress1bits();

  inline bool hasBitAddressXbits();
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getBitAddressXbits();
  inline void setBitAddressXbits( ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setBitAddressXbits(::kj::ArrayPtr<const  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initBitAddressXbits(unsigned int size);
  inline void adoptBitAddressXbits(::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownBitAddressXbits();

  inline bool hasBitWlAddress1bits();
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getBitWlAddress1bits();
  inline void setBitWlAddress1bits( ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setBitWlAddress1bits(::kj::ArrayPtr<const  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initBitWlAddress1bits(unsigned int size);
  inline void adoptBitWlAddress1bits(::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownBitWlAddress1bits();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FabricBitstreamQLMem::Pipeline {
public:
  typedef FabricBitstreamQLMem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool FabricBitstreamQLMem::Reader::hasConfigBitIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FabricBitstreamQLMem::Builder::hasConfigBitIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader FabricBitstreamQLMem::Reader::getConfigBitIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder FabricBitstreamQLMem::Builder::getConfigBitIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FabricBitstreamQLMem::Builder::setConfigBitIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void FabricBitstreamQLMem::Builder::setConfigBitIds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder FabricBitstreamQLMem::Builder::initConfigBitIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FabricBitstreamQLMem::Builder::adoptConfigBitIds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> FabricBitstreamQLMem::Builder::disownConfigBitIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FabricBitstreamQLMem::Reader::hasBitAddress1bits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FabricBitstreamQLMem::Builder::hasBitAddress1bits() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader FabricBitstreamQLMem::Reader::getBitAddress1bits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder FabricBitstreamQLMem::Builder::getBitAddress1bits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FabricBitstreamQLMem::Builder::setBitAddress1bits( ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void FabricBitstreamQLMem::Builder::setBitAddress1bits(::kj::ArrayPtr<const  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder FabricBitstreamQLMem::Builder::initBitAddress1bits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FabricBitstreamQLMem::Builder::adoptBitAddress1bits(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> FabricBitstreamQLMem::Builder::disownBitAddress1bits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FabricBitstreamQLMem::Reader::hasBitAddressXbits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FabricBitstreamQLMem::Builder::hasBitAddressXbits() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader FabricBitstreamQLMem::Reader::getBitAddressXbits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder FabricBitstreamQLMem::Builder::getBitAddressXbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FabricBitstreamQLMem::Builder::setBitAddressXbits( ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void FabricBitstreamQLMem::Builder::setBitAddressXbits(::kj::ArrayPtr<const  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder FabricBitstreamQLMem::Builder::initBitAddressXbits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FabricBitstreamQLMem::Builder::adoptBitAddressXbits(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> FabricBitstreamQLMem::Builder::disownBitAddressXbits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool FabricBitstreamQLMem::Reader::hasBitWlAddress1bits() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FabricBitstreamQLMem::Builder::hasBitWlAddress1bits() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader FabricBitstreamQLMem::Reader::getBitWlAddress1bits() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder FabricBitstreamQLMem::Builder::getBitWlAddress1bits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FabricBitstreamQLMem::Builder::setBitWlAddress1bits( ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void FabricBitstreamQLMem::Builder::setBitWlAddress1bits(::kj::ArrayPtr<const  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder FabricBitstreamQLMem::Builder::initBitWlAddress1bits(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void FabricBitstreamQLMem::Builder::adoptBitWlAddress1bits(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> FabricBitstreamQLMem::Builder::disownBitWlAddress1bits() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

