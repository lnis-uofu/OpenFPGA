# Run VPR for the 'and' design
#--write_rr_graph example_rr_graph.xml
vpr ${VPR_ARCH_FILE} ${VPR_TESTBENCH_BLIF} --clock_modeling route --absorb_buffer_luts off --device ${OPENFPGA_VPR_DEVICE} --route_chan_width ${OPENFPGA_VPR_ROUTE_CHAN_WIDTH}

# Read OpenFPGA architecture definition
read_openfpga_arch -f ${OPENFPGA_ARCH_FILE}

# Read OpenFPGA simulation settings
read_openfpga_simulation_setting -f ${OPENFPGA_SIM_SETTING_FILE}

# Annotate the OpenFPGA architecture to VPR data base
# to debug use --verbose options
link_openfpga_arch --activity_file ${ACTIVITY_FILE} --sort_gsb_chan_node_in_edges

# Check and correct any naming conflicts in the BLIF netlist
check_netlist_naming_conflict --fix --report ./netlist_renaming.xml

# Apply fix-up to Look-Up Table truth tables based on packing results
lut_truth_table_fixup

# Build the module graph
#  - Enabled compression on routing architecture modules
#  - Enabled frame view creation to save runtime and memory
#    Note that this is turned on when bitstream generation 
#    is the ONLY purpose of the flow!!!
build_fabric --compress_routing --frame_view #--verbose
# Add a fpga core between fpga top and the underlying modules
${OPENFPGA_ADD_FPGA_CORE_MODULE}
# Output module naming for debugging. Comment it if not required
write_module_naming_rules --file module_names_before_renaming.xml
# Rename modules with a given rule
#${OPENFPGA_RENAME_MODULE}

# Report reference to a file
report_reference ${OPENFPGA_REPORT_REFERENCE_MODULE_OPTIONS}
report_reference ${OPENFPGA_REPORT_REFERENCE_VERBOSE_OPTIONS}
report_reference ${OPENFPGA_REPORT_REFERENCE_NO_TIME_STAMP_OPTIONS}

# Finish and exit OpenFPGA
exit

# Note :
# To run verification at the end of the flow maintain source in ./SRC directory
